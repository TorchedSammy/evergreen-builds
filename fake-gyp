#!/usr/bin/env bash
set -euo pipefail

# This is a script to read binding.gyp and generate Makefiles.
# It uses yq to read them (because apparently binding.gyp is not JSON)

# temporarily unset -e because read will terminate with non-zero status
set +e

# A bunch of strings for building up various queries
# gets the actual tree-sitter binding target
read -r -d '' YQ_GET_TS_TARGET <<'EOF'
	.targets
	| map(select(.target_name | test("^tree_sitter_.+_binding$")))
	| .0
EOF

# gets the include directories in gcc's format
read -r -d '' YQ_GET_INCLUDE_DIR <<EOF
	$YQ_GET_TS_TARGET
	.include_dirs
	| map(select(test("^<!?\(.+\)\$") | not))
	| map("-I" + .)
EOF

# gets the sources
read -r -d '' YQ_GET_SOURCES <<EOF
	$YQ_GET_TS_TARGET
	.sources
	| map(select(test("bindings[/\\\\]node") | not))
EOF

set -e

# converts all the sources to object files
YQ_GET_SOURCES_OBJ="$YQ_GET_SOURCES"' | map(sub("\.cc?$"; ".o"))'

# converts all the sources to object files with root directory
YQ_GET_SOURCES_OBJ_ROOT="$YQ_GET_SOURCES_OBJ | map(strenv(PARSER_ROOT) + \"/\" + .)"

# gets the cflags and cxxflags
YQ_GET_CFLAGS="$YQ_GET_TS_TARGET | .cflags_c // []"
YQ_GET_CXXFLAGS="$YQ_GET_TS_TARGET | .cflags_cc // []"

# join an array with spaces
YQ_JOIN='join(" ")'


# functions
generate_header() {
    cat <<EOF
# This is automatically generated by fake-gyp. Do not modify.
STRIP ?= strip --strip-unneeded
CFLAGS ?= -Os
CFLAGS += -fPIC
CXXFLAGS ?= -Os
CXXFLAGS += -fPIC
LDFLAGS += -shared
EOF
}


generate_rules() {
	local parser_path="$1"
	local binding_path="$parser_path/binding.gyp"
    local extra_ldflags=""
    # shellcheck disable=SC2016
    local linker='$(CC)'

    # when C++ is used we need to use the C++ compiler to properly link the required libraries
    if [ "$(yq "$YQ_GET_SOURCES"' | any_c(. | test("\.cc$"))' "$binding_path")" = "true" ]; then
        extra_ldflags="$extra_ldflags -static"
        # shellcheck disable=SC2016
        linker='$(CXX)'
    fi

	cat <<EOF
# $parser_path
$parser_path/parser.dll: $(PARSER_ROOT="$parser_path" yq "$YQ_GET_SOURCES_OBJ_ROOT | $YQ_JOIN" "$binding_path")
	$linker -o \$@ \$^ \$(LDFLAGS) $extra_ldflags
	\$(STRIP) \$@

$parser_path/%.o: $parser_path/%.c
	\$(CC) \$(CFLAGS) $(yq "$YQ_GET_INCLUDE_DIR | $YQ_JOIN" "$binding_path") $(yq "$YQ_GET_CFLAGS | $YQ_JOIN" "$binding_path") -c -o \$@ \$<

$parser_path/%.o: $parser_path/%.cc
	\$(CXX) \$(CXXFLAGS) $(yq "$YQ_GET_INCLUDE_DIR | $YQ_JOIN" "$binding_path") $(yq "$YQ_GET_CXXFLAGS | $YQ_JOIN" "$binding_path") -c -o \$@ \$<

EOF
}


main() {
    if [[ $# -lt 1 ]]; then
        echo "error: no arguments specified"
        exit
    fi

    generate_header
    for parser_path in "$@"; do
        generate_rules "$parser_path"
    done
}

main "$@"
