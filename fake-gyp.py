#!/usr/bin/env python3

# A script that reads in the gyp files for tree-sitter bindings,
# and produces a makefile with all the targets.
# Example: ./fake-gyp.py tree-sitter-c tree-sitter-go tree-sitter-lua

import re
import sys
import ast
from pathlib import Path

def is_cpp(file):
    return re.search(r"\.c(c|xx|pp|\+\+)$", str(file))

def generate_target_rules(dir, output=[]):
    gyp_file = dir / "binding.gyp"
    targets = ast.literal_eval(gyp_file.read_text())
    ts_target = next(t for t in targets["targets"] if re.search("tree_sitter_.+_binding", t["target_name"]))

    include_dirs = [f"-I{dir / inc}" for inc in ts_target["include_dirs"] if not inc.startswith("<")]
    srcs = [dir /src for src in ts_target["sources"] if not re.search(r"node[/\\]binding", src)]
    objs = [str(src.with_suffix(".o")) for src in srcs]
    cflags_c = ts_target.get("cflags_c", [])
    cflags_cc = ts_target.get("cflags_cc", [])
    has_cpp = next((True for src in srcs if is_cpp(src)), False)

    output.append(f"OBJS += {' '.join(objs)}")
    output.append(f"SOS += {dir.stem}.$(SOEXT)")

    # generate dynamic library rule
    output.append(f"{dir.stem}.$(SOEXT): {' '.join(objs)}")
    output.append(f"\t{'$(CXX)' if has_cpp else '$(CC)'} -shared -o $@ $(LDFLAGS) {'-static' if has_cpp else ''} $^")
    output.append(f"\t$(STRIP) $@")

    for src in srcs:
        if is_cpp(src):
            cc = "$(CXX)"
            flags = f"$(CXXFLAGS) {' '.join(cflags_cc)} {' '.join(include_dirs)}"
        else:
            cc = "$(CC)"
            flags = f"$(CFLAGS) {' '.join(cflags_c)} {' '.join(include_dirs)}"

        output.append(f"{src.with_suffix('.o')}: {src}")
        output.append(f"\t{cc} -c -o $@ {flags} $<")

    return output


if __name__ == "__main__":
    for dir in sys.argv[1:]:
        output = generate_target_rules(Path(dir))
    with open("Makefile", "w") as f:
        f.write((
            "# generated by fake-gyp; do not modify.\n"
            "STRIP ?= strip --strip-unneeded\n"
            "CFLAGS ?= -Os\n"
            "CFLAGS += -fPIC\n"
            "CXXFLAGS ?= -Os\n"
            "CXXFLAGS += -fPIC\n"
            "SOEXT ?= so\n"
            "all: _all\n"
        ))
        f.write("\n".join(output))
        f.write((
            "\n"
            "_all: $(SOS)\n"
            "clean:\n"
            "\t$(RM) $(OBJS) $(SOS)\n"
            ".PHONY: all _all clean\n"
        ))
